{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

{{ macros.docblock(entityDocs) }}
#[derive(sqlx::FromRow, Debug, Clone)]
pub struct {{ entityName | pascalCase }}Row {
    #[sqlx(flatten)]
    {% if isAccount %}
    pub metadata: AccountRowMetadata,
    {% else %}
    pub metadata: InstructionRowMetadata,
    {% endif %}
{% for field in flatFields %}
    {% if field.docs and field.docs.length > 0 %}
{{ macros.docblock(field.docs) -}}
    {% endif %}
    pub {{ field.column }}: {{ field.rowType }},
{% endfor %}
}

impl {{ entityName | pascalCase }}Row {
    pub fn from_parts({% if flatFields.length == 0 %}_{% endif %}source: {{ entityName | pascalCase }}, metadata: {% if isAccount %}AccountMetadata{% else %}InstructionMetadata{% endif %}) -> Self {
        Self {
            metadata: metadata.into(),
            {% for field in flatFields %}
            {{ field.column }}: {{ field.expr }},
            {% endfor %}
        }
    }
}

impl TryFrom<{{ entityName | pascalCase }}Row> for {{ entityName | pascalCase }} {
    type Error = carbon_core::error::Error;
    fn try_from({% if flatFields.length == 0 %}_{% endif %}source: {{ entityName | pascalCase }}Row) -> Result<Self, Self::Error> {
        Ok(Self {
            {% for f in flatFields %}
            {{ f.rustPath.split('.').pop() }}: {{ f.reverseExpr }},
            {% endfor %}
        })
    }
}

{% endblock %}

